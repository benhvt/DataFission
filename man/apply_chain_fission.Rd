% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply_chain_fission.R
\name{apply_chain_fission}
\alias{apply_chain_fission}
\title{Post clustering inference using chain data fission and Welch's t-test}
\usage{
apply_chain_fission(
  X,
  Sigma = NULL,
  tau = 0.4,
  nFission = 1000,
  merge_function = c("KS", "Fisher", "geometric", "harmonic"),
  cl_fun,
  k,
  k1,
  k2,
  parallel = FALSE,
  ncores = NULL,
  test,
  ...
)
}
\arguments{
\item{X}{The data matrix of size n x p where post-clustering inference must be applied}

\item{Sigma}{An estimator of the covariance matrix of size p x p  of X}

\item{tau}{The tuning parameter used of data fission}

\item{nFission}{The number of repeated data fission to perform}

\item{merge_function}{The merging function used to derive chain fission p values}

\item{cl_fun}{The clustering function that will applied on f(X)}

\item{k}{The number of clusters built using cl_fun}

\item{k1}{The first cluster of interest among the k}

\item{k2}{The second cluster of interest among the k}

\item{parallel}{A logical flag indicating whether parallel computation should be enabled}

\item{ncores}{An integer indicating the number of cores to be used when parallel is TRUE}

\item{test}{The statistical test to use for inference}

\item{...}{further arguments that could be parsed in test}
}
\value{
#' A list with the following elements \itemize{
\item \code{Cluster}: the nFission estimated partition on f(X)
\item \code{p.value}: a numeric vector of length p containing the nFission merging p-values or a list
of M numeric vectors of length p if more than one merging method are used}
}
\description{
Post clustering inference using chain data fission and Welch's t-test
}
\examples{
cl_fun <- function(x, K){
km <- kmeans(x, center  = K)
  return(km$cluster)
}
X1_cl1 <- matrix(rnorm(100*25, mean = 0), ncol = 25)
X1_cl2 <- matrix(rnorm(100*25, mean = 1.5), ncol = 25)
X1 <- rbind(X1_cl1, X1_cl2)
X2 <- matrix(rnorm(200*50), ncol = 50)
X <- cbind(X1,X2)
plot(X, col = rep(1:2, each = 100))
apply_chain_fission(X, nFission = 10, cl_fun = cl_fun, k=2,  k1=1, k2=2, test = t.test)
fission(X, tau = 0.4, cl_fun = cl_fun, k=2, k1=1, k2=2, test = t.test)
}
